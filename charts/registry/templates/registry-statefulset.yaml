apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.registry.name }}-statefulset
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.registry.name }}-service
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.registry.name }}
  template:
    metadata:
      name: consul
      labels:
        app: {{ .Values.registry.name }}
    spec:
      securityContext:
        fsGroup: 1000
      imagePullSecrets:
      - name: regcred
      containers:
        - name: 'consul'
          image: {{ .Values.registry.statefulset.image.repository }}:{{ .Values.registry.statefulset.image.tag }}
          imagePullPolicy: 'Always'
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: tcp-serflan
              protocol: 'TCP'
              containerPort: 8301
            - name: udp-serflan
              protocol: 'UDP'
              containerPort: 8301
            - name: tcp-serfwan
              protocol: 'TCP'
              containerPort: 8302
            - name: udp-serfwan
              protocol: 'UDP'
              containerPort: 8302
            - name: server
              containerPort: 8300
            - name: consuldns
              containerPort: 8600
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 1024Mi
          env:
            - name: INITIAL_CLUSTER_SIZE
              value: '1'
            - name: PETSET_NAME
              value: {{ .Values.registry.name }}-service
            - name: PETSET_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: datadir1
              mountPath: /var/lib/consul
            - name: gossip-key
              mountPath: /etc/consul/secrets
              readOnly: true
          command:
            - '/bin/sh'
            - '-ec'
            - |
              IP=$(hostname -i)

              if [ -e /etc/consul/secrets/gossip-key ]; then
                echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
                GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
              fi

              for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                  while true; do
                      echo "Waiting for ${PETSET_NAME} to come up"
                      ping -W 1 -c 1 ${PETSET_NAME}.${PETSET_NAMESPACE}.svc.cluster.local > /dev/null && break
                      sleep 1s
                  done
              done

              PEERS=""
              for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                  PEERS="${PEERS}${PEERS:+ } -retry-join $(ping -c 1 ${PETSET_NAME}.${PETSET_NAMESPACE}.svc.cluster.local | awk -F'[()]' '/PING/{print $2}')"
              done

              exec /bin/consul agent \
                -data-dir=/var/lib/consul \
                -server \
                -ui \
                -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
                -bind=0.0.0.0 \
                -advertise=${IP} \
                ${PEERS} \
                ${GOSSIP_KEY} \
                -client=0.0.0.0
      volumes:
        - name: gossip-key
          secret:
            secretName: gossip-key
      #readinessProbe:
      #  httpGet:
      #    path: /v1/health/service/consul
      #    port: 8500
      #  initialDelaySeconds: 10
      #  timeoutSeconds: 1
  volumeClaimTemplates:
    - metadata:
        name: datadir1
        annotations:
          volume.alpha.kubernetes.io/storage-class: anything
      spec:
        storageClassName: longhorn
        accessModes:
          - 'ReadWriteOnce'
        resources:
          requests:
            # upstream recommended max is 700M
            storage: '700M'
